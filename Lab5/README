Шаги выполнения работы:

1. Подготовка к работе:
   - Продолжение работы с уже существующим проектом.
   - Убедился, что файл `.env` настроен корректно для подключения к базе данных.

2. Аутентификация пользователей:
   - Создание контроллера `AuthController`:
     В контроллере были реализованы методы для управления аутентификацией:
     - `register()` — для отображения формы регистрации.
     - `storeRegister()` — для обработки данных при регистрации.
     - `login()` — для отображения формы входа.
     - `storeLogin()` — для обработки данных при входе.
   
   - Маршруты для регистрации, входа и выхода:
     Для реализации аутентификации были созданы соответствующие маршруты:
     Route::get('register', [AuthController::class, 'register'])->name('register');
     Route::post('register', [AuthController::class, 'storeRegister']);
     Route::get('login', [AuthController::class, 'login'])->name('login');
     Route::post('login', [AuthController::class, 'storeLogin']);
     Route::post('logout', [AuthController::class, 'logout'])->name('logout');


   - Валидация данных:
     Создан отдельный класс `RegisterRequest` для валидации данных при регистрации пользователя. Валидация входных данных также может быть добавлена в контроллер для метода `storeLogin`.

3. Использование готовых компонентов для аутентификации:
   Для ускоренной настройки аутентификации был установлен пакет **Laravel Breeze**, который автоматически генерирует компоненты для регистрации, входа, восстановления пароля и прочего:

   php artisan breeze:install
   npm install && npm run dev
   php artisan migrate

   Это позволило настроить стандартные маршруты `/register`, `/login`, `/logout` и другие компоненты безопасности.

4. Авторизация пользователей:
   Для реализации страницы "Личный кабинет", доступной только для авторизованных пользователей:
   - Создан маршрут с middleware `auth`, который проверяет, что пользователь авторизован:

     Route::get('dashboard', function () {
         return view('dashboard');
     })->middleware('auth');

   - На странице "Личный кабинет" отображается информация, доступная только авторизованным пользователям.

5. Система ролей (Администратор и Пользователь):
   - Добавление ролей:
     В таблице `users` была добавлена колонка `role`, которая хранит роль пользователя (`admin` или `user`).
     - Администратор имеет возможность просматривать личные кабинеты всех пользователей.
     - Пользователь может просматривать только свой собственный личный кабинет.
   
   - Реализация проверки ролей:
     Для проверки ролей пользователей используется middleware или метод `can()`:

     Route::get('/admin', function () {
         return view('admin');
     })->middleware('can:admin');

     Роль пользователя устанавливается при регистрации или через админку, и проверяется при доступе к маршрутам.

6. Выход пользователя и защита от CSRF-атак:
   - Добавлена кнопка для выхода пользователя, которая вызывает метод `logout` в контроллере.

     Route::post('logout', [AuthController::class, 'logout'])->name('logout');

   - Защита от CSRF-атак реализована с помощью встроенной защиты, предоставляемой Laravel. Все формы, которые отправляют данные через POST, должны содержать токен CSRF. В Laravel для этого автоматически добавляется директива `@csrf` в форму:

     <form method="POST" action="{{ route('logout') }}">
         @csrf
         <button type="submit">Выход</button>
     </form>


Контрольные вопросы:

1. **Какие готовые решения для аутентификации предоставляет Laravel?**
   Laravel предоставляет несколько готовых решений для аутентификации, таких как **Breeze**, **Fortify**, **Jetstream**. Эти решения включают в себя маршруты для регистрации, входа, сброса пароля и других стандартных компонентов безопасности.

2. **Какие методы аутентификации пользователей вы знаете?**
   В Laravel существует несколько методов аутентификации, включая:
   - **Традиционная аутентификация** через электронную почту и пароль.
   - **API аутентификация** через токены, например с использованием **Laravel Passport** или **Sanctum**.
   - **Социальная аутентификация** с использованием сервисов, таких как Google или Facebook через Laravel Socialite.

3. **Чем отличается аутентификация от авторизации?**
   - **Аутентификация** — это процесс проверки личности пользователя, то есть подтверждение того, что пользователь является тем, за кого себя выдает.
   - **Авторизация** — это процесс определения, какие действия и ресурсы доступны пользователю после того, как он был аутентифицирован. Это устанавливает права доступа.

4. **Как обеспечить защиту от CSRF-атак в Laravel?**
   Laravel автоматически защищает все формы от CSRF-атак. В каждой форме, которая отправляет данные через POST, должен быть включен CSRF-токен, который можно вставить в форму с помощью директивы `@csrf`. Этот токен проверяется при отправке формы, чтобы убедиться, что запрос был сделан с доверенного источника.


В ходе лабораторной работы была реализована система аутентификации и авторизации пользователей с использованием стандартных механизмов Laravel. Созданы и настроены маршруты для регистрации, входа, выхода, а также страницы "Личный кабинет". Реализована защита от CSRF-атак и настроена система ролей для управления доступом пользователей. Все функции были протестированы на работоспособность, и приложение успешно прошло проверку.

